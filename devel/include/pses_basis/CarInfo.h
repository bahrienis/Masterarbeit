// Generated by gencpp from file pses_basis/CarInfo.msg
// DO NOT EDIT!


#ifndef PSES_BASIS_MESSAGE_CARINFO_H
#define PSES_BASIS_MESSAGE_CARINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pses_basis/PsesHeader.h>

namespace pses_basis
{
template <class ContainerAllocator>
struct CarInfo_
{
  typedef CarInfo_<ContainerAllocator> Type;

  CarInfo_()
    : header()
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , driven_distance(0.0)
    , speed(0.0)  {
    }
  CarInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , driven_distance(0.0)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef  ::pses_basis::PsesHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _driven_distance_type;
  _driven_distance_type driven_distance;

   typedef float _speed_type;
  _speed_type speed;




  typedef boost::shared_ptr< ::pses_basis::CarInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pses_basis::CarInfo_<ContainerAllocator> const> ConstPtr;

}; // struct CarInfo_

typedef ::pses_basis::CarInfo_<std::allocator<void> > CarInfo;

typedef boost::shared_ptr< ::pses_basis::CarInfo > CarInfoPtr;
typedef boost::shared_ptr< ::pses_basis::CarInfo const> CarInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pses_basis::CarInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pses_basis::CarInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pses_basis

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'pses_basis': ['/home/pses/catkin_ws/src/pses_basis/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pses_basis::CarInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pses_basis::CarInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pses_basis::CarInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pses_basis::CarInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pses_basis::CarInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pses_basis::CarInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pses_basis::CarInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1b410760ce8ac4a21269f7d0a4a31c8";
  }

  static const char* value(const ::pses_basis::CarInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa1b410760ce8ac4aULL;
  static const uint64_t static_value2 = 0x21269f7d0a4a31c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::pses_basis::CarInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pses_basis/CarInfo";
  }

  static const char* value(const ::pses_basis::CarInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pses_basis::CarInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PsesHeader header\n\
float32 roll\n\
float32 pitch\n\
float32 yaw\n\
float32 driven_distance\n\
float32 speed\n\
\n\
================================================================================\n\
MSG: pses_basis/PsesHeader\n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch\n\
# * stamp.nsec: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
int16 car_id\n\
";
  }

  static const char* value(const ::pses_basis::CarInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pses_basis::CarInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.driven_distance);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pses_basis::CarInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pses_basis::CarInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::pses_basis::PsesHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "driven_distance: ";
    Printer<float>::stream(s, indent + "  ", v.driven_distance);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PSES_BASIS_MESSAGE_CARINFO_H
