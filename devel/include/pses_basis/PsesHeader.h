// Generated by gencpp from file pses_basis/PsesHeader.msg
// DO NOT EDIT!


#ifndef PSES_BASIS_MESSAGE_PSESHEADER_H
#define PSES_BASIS_MESSAGE_PSESHEADER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pses_basis
{
template <class ContainerAllocator>
struct PsesHeader_
{
  typedef PsesHeader_<ContainerAllocator> Type;

  PsesHeader_()
    : seq(0)
    , stamp()
    , frame_id()
    , car_id(0)  {
    }
  PsesHeader_(const ContainerAllocator& _alloc)
    : seq(0)
    , stamp()
    , frame_id(_alloc)
    , car_id(0)  {
  (void)_alloc;
    }



   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef int16_t _car_id_type;
  _car_id_type car_id;




  typedef boost::shared_ptr< ::pses_basis::PsesHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pses_basis::PsesHeader_<ContainerAllocator> const> ConstPtr;

}; // struct PsesHeader_

typedef ::pses_basis::PsesHeader_<std::allocator<void> > PsesHeader;

typedef boost::shared_ptr< ::pses_basis::PsesHeader > PsesHeaderPtr;
typedef boost::shared_ptr< ::pses_basis::PsesHeader const> PsesHeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pses_basis::PsesHeader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pses_basis::PsesHeader_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pses_basis

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'pses_basis': ['/home/pses/catkin_ws/src/pses_basis/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pses_basis::PsesHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pses_basis::PsesHeader_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pses_basis::PsesHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pses_basis::PsesHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pses_basis::PsesHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pses_basis::PsesHeader_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pses_basis::PsesHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92a2b8c0dd16af59b59174462d53556a";
  }

  static const char* value(const ::pses_basis::PsesHeader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92a2b8c0dd16af59ULL;
  static const uint64_t static_value2 = 0xb59174462d53556aULL;
};

template<class ContainerAllocator>
struct DataType< ::pses_basis::PsesHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pses_basis/PsesHeader";
  }

  static const char* value(const ::pses_basis::PsesHeader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pses_basis::PsesHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch\n\
# * stamp.nsec: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
int16 car_id\n\
";
  }

  static const char* value(const ::pses_basis::PsesHeader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pses_basis::PsesHeader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.seq);
      stream.next(m.stamp);
      stream.next(m.frame_id);
      stream.next(m.car_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PsesHeader_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pses_basis::PsesHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pses_basis::PsesHeader_<ContainerAllocator>& v)
  {
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "car_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.car_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PSES_BASIS_MESSAGE_PSESHEADER_H
