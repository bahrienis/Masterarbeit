// Generated by gencpp from file pses_basis/SensorData.msg
// DO NOT EDIT!


#ifndef PSES_BASIS_MESSAGE_SENSORDATA_H
#define PSES_BASIS_MESSAGE_SENSORDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pses_basis/PsesHeader.h>

namespace pses_basis
{
template <class ContainerAllocator>
struct SensorData_
{
  typedef SensorData_<ContainerAllocator> Type;

  SensorData_()
    : header()
    , accelerometer_x(0.0)
    , accelerometer_y(0.0)
    , accelerometer_z(0.0)
    , angular_velocity_x(0.0)
    , angular_velocity_y(0.0)
    , angular_velocity_z(0.0)
    , magnetometer_x(0.0)
    , magnetometer_y(0.0)
    , magnetometer_z(0.0)
    , hall_sensor_dt(0.0)
    , hall_sensor_dt_full(0.0)
    , hall_sensor_count(0)
    , range_sensor_front(0.0)
    , range_sensor_left(0.0)
    , range_sensor_right(0.0)
    , system_battery_voltage(0.0)
    , motor_battery_voltage(0.0)  {
    }
  SensorData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , accelerometer_x(0.0)
    , accelerometer_y(0.0)
    , accelerometer_z(0.0)
    , angular_velocity_x(0.0)
    , angular_velocity_y(0.0)
    , angular_velocity_z(0.0)
    , magnetometer_x(0.0)
    , magnetometer_y(0.0)
    , magnetometer_z(0.0)
    , hall_sensor_dt(0.0)
    , hall_sensor_dt_full(0.0)
    , hall_sensor_count(0)
    , range_sensor_front(0.0)
    , range_sensor_left(0.0)
    , range_sensor_right(0.0)
    , system_battery_voltage(0.0)
    , motor_battery_voltage(0.0)  {
  (void)_alloc;
    }



   typedef  ::pses_basis::PsesHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _accelerometer_x_type;
  _accelerometer_x_type accelerometer_x;

   typedef double _accelerometer_y_type;
  _accelerometer_y_type accelerometer_y;

   typedef double _accelerometer_z_type;
  _accelerometer_z_type accelerometer_z;

   typedef double _angular_velocity_x_type;
  _angular_velocity_x_type angular_velocity_x;

   typedef double _angular_velocity_y_type;
  _angular_velocity_y_type angular_velocity_y;

   typedef double _angular_velocity_z_type;
  _angular_velocity_z_type angular_velocity_z;

   typedef double _magnetometer_x_type;
  _magnetometer_x_type magnetometer_x;

   typedef double _magnetometer_y_type;
  _magnetometer_y_type magnetometer_y;

   typedef double _magnetometer_z_type;
  _magnetometer_z_type magnetometer_z;

   typedef float _hall_sensor_dt_type;
  _hall_sensor_dt_type hall_sensor_dt;

   typedef float _hall_sensor_dt_full_type;
  _hall_sensor_dt_full_type hall_sensor_dt_full;

   typedef uint32_t _hall_sensor_count_type;
  _hall_sensor_count_type hall_sensor_count;

   typedef float _range_sensor_front_type;
  _range_sensor_front_type range_sensor_front;

   typedef float _range_sensor_left_type;
  _range_sensor_left_type range_sensor_left;

   typedef float _range_sensor_right_type;
  _range_sensor_right_type range_sensor_right;

   typedef float _system_battery_voltage_type;
  _system_battery_voltage_type system_battery_voltage;

   typedef float _motor_battery_voltage_type;
  _motor_battery_voltage_type motor_battery_voltage;




  typedef boost::shared_ptr< ::pses_basis::SensorData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pses_basis::SensorData_<ContainerAllocator> const> ConstPtr;

}; // struct SensorData_

typedef ::pses_basis::SensorData_<std::allocator<void> > SensorData;

typedef boost::shared_ptr< ::pses_basis::SensorData > SensorDataPtr;
typedef boost::shared_ptr< ::pses_basis::SensorData const> SensorDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pses_basis::SensorData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pses_basis::SensorData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pses_basis

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'pses_basis': ['/home/pses/catkin_ws/src/pses_basis/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pses_basis::SensorData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pses_basis::SensorData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pses_basis::SensorData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pses_basis::SensorData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pses_basis::SensorData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pses_basis::SensorData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pses_basis::SensorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f73f6feeb58ddb8c1eddaeaffac832d4";
  }

  static const char* value(const ::pses_basis::SensorData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf73f6feeb58ddb8cULL;
  static const uint64_t static_value2 = 0x1eddaeaffac832d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::pses_basis::SensorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pses_basis/SensorData";
  }

  static const char* value(const ::pses_basis::SensorData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pses_basis::SensorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PsesHeader header\n\
float64 accelerometer_x\n\
float64 accelerometer_y\n\
float64 accelerometer_z\n\
float64 angular_velocity_x\n\
float64 angular_velocity_y\n\
float64 angular_velocity_z\n\
float64 magnetometer_x\n\
float64 magnetometer_y\n\
float64 magnetometer_z\n\
float32 hall_sensor_dt\n\
float32 hall_sensor_dt_full\n\
uint32 hall_sensor_count\n\
float32 range_sensor_front\n\
float32 range_sensor_left\n\
float32 range_sensor_right\n\
float32 system_battery_voltage\n\
float32 motor_battery_voltage\n\
\n\
\n\
================================================================================\n\
MSG: pses_basis/PsesHeader\n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch\n\
# * stamp.nsec: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
int16 car_id\n\
";
  }

  static const char* value(const ::pses_basis::SensorData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pses_basis::SensorData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.accelerometer_x);
      stream.next(m.accelerometer_y);
      stream.next(m.accelerometer_z);
      stream.next(m.angular_velocity_x);
      stream.next(m.angular_velocity_y);
      stream.next(m.angular_velocity_z);
      stream.next(m.magnetometer_x);
      stream.next(m.magnetometer_y);
      stream.next(m.magnetometer_z);
      stream.next(m.hall_sensor_dt);
      stream.next(m.hall_sensor_dt_full);
      stream.next(m.hall_sensor_count);
      stream.next(m.range_sensor_front);
      stream.next(m.range_sensor_left);
      stream.next(m.range_sensor_right);
      stream.next(m.system_battery_voltage);
      stream.next(m.motor_battery_voltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pses_basis::SensorData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pses_basis::SensorData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::pses_basis::PsesHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "accelerometer_x: ";
    Printer<double>::stream(s, indent + "  ", v.accelerometer_x);
    s << indent << "accelerometer_y: ";
    Printer<double>::stream(s, indent + "  ", v.accelerometer_y);
    s << indent << "accelerometer_z: ";
    Printer<double>::stream(s, indent + "  ", v.accelerometer_z);
    s << indent << "angular_velocity_x: ";
    Printer<double>::stream(s, indent + "  ", v.angular_velocity_x);
    s << indent << "angular_velocity_y: ";
    Printer<double>::stream(s, indent + "  ", v.angular_velocity_y);
    s << indent << "angular_velocity_z: ";
    Printer<double>::stream(s, indent + "  ", v.angular_velocity_z);
    s << indent << "magnetometer_x: ";
    Printer<double>::stream(s, indent + "  ", v.magnetometer_x);
    s << indent << "magnetometer_y: ";
    Printer<double>::stream(s, indent + "  ", v.magnetometer_y);
    s << indent << "magnetometer_z: ";
    Printer<double>::stream(s, indent + "  ", v.magnetometer_z);
    s << indent << "hall_sensor_dt: ";
    Printer<float>::stream(s, indent + "  ", v.hall_sensor_dt);
    s << indent << "hall_sensor_dt_full: ";
    Printer<float>::stream(s, indent + "  ", v.hall_sensor_dt_full);
    s << indent << "hall_sensor_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.hall_sensor_count);
    s << indent << "range_sensor_front: ";
    Printer<float>::stream(s, indent + "  ", v.range_sensor_front);
    s << indent << "range_sensor_left: ";
    Printer<float>::stream(s, indent + "  ", v.range_sensor_left);
    s << indent << "range_sensor_right: ";
    Printer<float>::stream(s, indent + "  ", v.range_sensor_right);
    s << indent << "system_battery_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.system_battery_voltage);
    s << indent << "motor_battery_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.motor_battery_voltage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PSES_BASIS_MESSAGE_SENSORDATA_H
